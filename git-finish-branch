#!/bin/bash

targetBranch=${1:-"$(git current-branch)"}
tempDir="$HOME/.git_temp"
tempFile="$tempDir/saved_stashes.txt"

(request-user-confirmation-to "finish ${targetBranch}") || exit $?

(git-sync "$@") || exit $?

exists() {
  if defined -s "$1"; then
    return $([ -e $1 ])
  else
    return "1"
  fi
}

remove_output_of() {
  "$@"
  return "$?"
}

create_temp_file() {
  mkdir -p "$tempDir"
  touch -a "$tempFile"
}

add_to_top_of_file() {
  echo "$1" | cat - "$tempFile" >temp && mv temp "$tempFile"
}

remember_branch() {
  add_to_top_of_file "$1:remember$1"
}

stash_branch() {
  lgln -g "Stashing $1 since there are uncommited changes..."
  git stash push -m "remember$1" --include-untracked
  lgln -g "Remembering $1 had uncommitted changes..."
  if ! exists "$tempFile"; then
    create_temp_file
  fi
  remember_branch "$1"
}

checkout() {
  if [ "$1" = "$targetBranch" ]; then
    lgln -g "Checking out feature branch $1..."
  else
    lgln -g "Checking out $1..."
  fi
  if ! git checkout "$1"; then
    stash_branch "$(git current-branch)"
  fi
}

pull_rebase() {
  if git is-dirty; then
    if [ "$1" = "$targetBranch" ]; then
      lgln -y "WARN: looks like feature branch $targetBranch has uncommited changes. Continue? "
      (request-user-input) || exit $?
    fi
    stash_branch "$1"
  fi
  (git push-branch "$1") || exit $?
  lgln -g "Pulling updates from the remote branch origin/$1..."
  git pull --rebase
  (stop-if-conflicts) || exit $?
}

stash_exists() {
  git stash list | grep "remember$1"
  return "$?"
}

remove_item() {
  sed -i "/$1/d" "$tempFile"
}

stash_pop() {
  if stash_exists "$targetBranch"; then
    if [ "$1" = "$targetBranch" ]; then
      lgln -g "Popping off feature branch $1's stash..."
    else
      lgln -g "Popping off branch $1's stash..."
    fi
    local stashName="remember$1"
    git stash pop "$(git stash list | grep "$stashName" | cut -d: -f1)"
    remove_item "$stashName" "$tempFile"
    (stop-if-conflicts) || exit $?
  fi
}

rebase() {
  if [ "$1" = "$targetBranch" ]; then
    lgln -g "Rebasing feature branch $1 against $3"
  elif [ "$3" = "$targetBranch" ]; then
    lgln -g "Rebasing $1 against feature branch $3"
  else
    lgln -g "Rebasing $1 against $3..."
  fi
  git rebase "$1"
  (stop-if-conflicts) || exit $?
}

squash_branch() {
  lgln -g "Squashing commits..."
  git reset "$(git merge-base master "$1")"
  git add -A
  lgln -g "Please enter a commit message for the single (squashed) commit"
  git commit
  lgln -g "Force (with lease) pushing..."
  git push --force-with-lease
}

unstash_remembered_stashes() {
  cp "$tempFile" "${tempFile}.bak"
  while read -r line; do
    local branch=${line%%:*}
    local stashName=${line##*:}
    if git-branch-exists -s branch; then
      lgln -g "Looks like there's a stash saved on $branch."
      checkout "$branch"
      stash_pop "$stashName"
      awk '!/pattern/' "$tempFile" >temp && mv temp "$tempFile"
    fi
  done <"${tempFile}.bak"
  rm "${tempFile}.bak"
}

checkout "master"

if git-branch-exists -s "$targetBranch"; then
  checkout "$targetBranch"
  pull_rebase "$targetBranch"
  if stash_exists "$targetBranch"; then
    stash_pop "$targetBranch"
  fi
  rebase "$targetBranch" against "master"
  squash_branch "$targetBranch"
  checkout "master"
  rebase "master" against "$targetBranch"
  git delete-branch -y "$targetBranch"
  lgln -g "Pushing squashed commit..."
  git push
fi

if exists "$tempFile"; then
  unstash_remembered_stashes
fi

# cleanup
if exists "$tempFile" && ! grep -q '[^[:space:]]' <"$tempFile"; then
  rm "$tempFile"
fi

lgln -g "Done! :)"
