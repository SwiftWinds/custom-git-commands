#!/bin/sh

targetBranch=${1:-"$(git current-branch)"}
currentBranchWasDirty=false
targetBranchWasDirty=false

# Find which is your current branch
if currentBranch="$(git current-branch)"; then
  lgln -g "On branch $currentBranch"
  if git is-dirty; then
    lgln -g "Looks like there are uncommitted changes on the current branch... stashing..."
    git stash --include-untracked
    lgln -g "Remembering that $currentBranch has uncommitted changes..."
    currentBranchWasDirty=true
  fi
  lgln -g "Checking out master..."
  git checkout master
  lgln -g "Pulling updates from the remote branch origin/master..."
  # Pull the branch to update it
  git pull --rebase
  (stop-if-conflicts) || exit $?
  lgln -g "Updated master with changes from origin/master"
  # check if upstream exists, rebase if it does
  if git is-fork; then
    lgln -g "Looks like this is a fork. Rebasing upstream master..."
    git rebase upstream/master
    (stop-if-conflicts) || exit $?
  fi
  if [ "$targetBranch" != "master" ]; then
    lgln -g "Checking out target branch $targetBranch..."
    git checkout "$targetBranch"
    if git is-dirty; then
      lgln -g "Looks like there are uncommitted changes on target branch... stashing..."
      git stash --include-untracked
      lgln -g "Remembering that target branch had uncommitted changes..."
      targetBranchWasDirty=true
    fi
    # Rebase the changes
    lgln -g "Updating target branch $targetBranch to latest master..."
    git rebase master
    (stop-if-conflicts) || exit $?
    lgln -g "Force (with lease) pushing..."
    git push --force-with-lease
    lgln -g "Updated target branch $targetBranch with changes from master"
  fi
  if [ $targetBranchWasDirty = "true" ] ; then
    # Apply the stashed changes
    lgln -g "Checking out target branch $targetBranch's previously unsaved changes..."
    git checkout "$targetBranch"
    lgln -g "Unstashing target branch $targetBranch's previously unsaved changes..."
    git stash pop
    (stop-if-conflicts) || exit $?
  fi
  if [ $currentBranchWasDirty = "true" ] && [ "$currentBranch" != "$targetBranch" ]; then
    # Apply the stashed changes
    lgln -g "Checking out $currentBranch (the branch you were on when you started syncing)..."
    git checkout "$currentBranch"
    lgln -g "Unstashing $currentBranch (the branch you were on when you started syncing)..."
    git stash pop
    (stop-if-conflicts) || exit $?
  fi
else
  lgln -g ERROR: Cannot find the current branch!
fi

lgln -g "Done! :)"